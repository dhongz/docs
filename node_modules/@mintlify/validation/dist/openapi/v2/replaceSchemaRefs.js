import { v4 as uuidv4 } from 'uuid';
export const replaceSchemaRefs = ({ schema, refUuidMap, }) => {
    if ('$ref' in schema) {
        const refId = schema.$ref;
        const uuid = refUuidMap[refId] || uuidv4();
        schema.$ref = uuid;
    }
    if ('properties' in schema && schema.properties && typeof schema.properties === 'object') {
        Object.values(schema.properties).forEach((subschema) => {
            replaceSchemaRefs({ schema: subschema, refUuidMap });
        });
    }
    if ('items' in schema && schema.items && typeof schema.items === 'object') {
        replaceSchemaRefs({ schema: schema.items, refUuidMap });
    }
    if ('oneOf' in schema && schema.oneOf && Array.isArray(schema.oneOf)) {
        schema.oneOf.forEach((subschema) => {
            replaceSchemaRefs({ schema: subschema, refUuidMap });
        });
    }
    if ('anyOf' in schema && schema.anyOf && Array.isArray(schema.anyOf)) {
        schema.anyOf.forEach((subschema) => {
            replaceSchemaRefs({ schema: subschema, refUuidMap });
        });
    }
    if ('allOf' in schema && schema.allOf && Array.isArray(schema.allOf)) {
        schema.allOf.forEach((subschema) => {
            replaceSchemaRefs({ schema: subschema, refUuidMap });
        });
    }
    if ('not' in schema && schema.not && typeof schema.not === 'object') {
        replaceSchemaRefs({ schema: schema.not, refUuidMap });
    }
};
